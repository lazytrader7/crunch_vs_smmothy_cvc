{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3","program":"/home/lazytrader/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bincode","/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5c8c43ea8e4016e7","-C","extra-filename=-5c8c43ea8e4016e7","--out-dir","/home/lazytrader/cvc/target/rls/debug/deps","-L","dependency=/home/lazytrader/cvc/target/rls/debug/deps","--extern","serde=/home/lazytrader/cvc/target/rls/debug/deps/libserde-8452c9901df51357.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lazytrader/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/lazytrader/cvc/target/rls/debug/deps/libbincode-5c8c43ea8e4016e7.rmeta"},"prelude":{"crate_id":{"name":"bincode","disambiguator":[13608150487155196171,0]},"crate_root":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src","external_crates":[{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":20,"id":{"name":"serde","disambiguator":[5459246091783542177,0]}},{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","num":21,"id":{"name":"serde_derive","disambiguator":[1162066192159404772,0]}}],"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":0,"byte_end":6516,"line_start":1,"line_end":201,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8120,"byte_end":8129,"line_start":42,"line_end":42,"column_start":24,"column_end":33},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8120,"byte_end":8129,"line_start":42,"line_end":42,"column_start":24,"column_end":33},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8131,"byte_end":8143,"line_start":42,"line_end":42,"column_start":35,"column_end":47},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1316},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8131,"byte_end":8143,"line_start":42,"line_end":42,"column_start":35,"column_end":47},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1325},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8145,"byte_end":8157,"line_start":42,"line_end":42,"column_start":49,"column_end":61},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8145,"byte_end":8157,"line_start":42,"line_end":42,"column_start":49,"column_end":61},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8180,"byte_end":8194,"line_start":43,"line_end":43,"column_start":21,"column_end":35},"alias_span":null,"name":"FixintEncoding","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1347},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8180,"byte_end":8194,"line_start":43,"line_end":43,"column_start":21,"column_end":35},"alias_span":null,"name":"FixintEncoding","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1351},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8196,"byte_end":8210,"line_start":43,"line_end":43,"column_start":37,"column_end":51},"alias_span":null,"name":"VarintEncoding","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1352},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8196,"byte_end":8210,"line_start":43,"line_end":43,"column_start":37,"column_end":51},"alias_span":null,"name":"VarintEncoding","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8235,"byte_end":8236,"line_start":44,"line_end":44,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Config","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8260,"byte_end":8267,"line_start":45,"line_end":45,"column_start":23,"column_end":30},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1429},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8260,"byte_end":8267,"line_start":45,"line_end":45,"column_start":23,"column_end":30},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1434},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8269,"byte_end":8277,"line_start":45,"line_end":45,"column_start":32,"column_end":40},"alias_span":null,"name":"Infinite","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1435},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8269,"byte_end":8277,"line_start":45,"line_end":45,"column_start":32,"column_end":40},"alias_span":null,"name":"Infinite","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8305,"byte_end":8318,"line_start":46,"line_end":46,"column_start":26,"column_end":39},"alias_span":null,"name":"AllowTrailing","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1440},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8305,"byte_end":8318,"line_start":46,"line_end":46,"column_start":26,"column_end":39},"alias_span":null,"name":"AllowTrailing","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1444},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8320,"byte_end":8334,"line_start":46,"line_end":46,"column_start":41,"column_end":55},"alias_span":null,"name":"RejectTrailing","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8320,"byte_end":8334,"line_start":46,"line_end":46,"column_start":41,"column_end":55},"alias_span":null,"name":"RejectTrailing","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":1398},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1235,"byte_end":1241,"line_start":44,"line_end":44,"column_start":18,"column_end":24},"alias_span":null,"name":"Config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1449},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1243,"byte_end":1257,"line_start":44,"line_end":44,"column_start":26,"column_end":40},"alias_span":null,"name":"DefaultOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1259,"byte_end":1266,"line_start":44,"line_end":44,"column_start":42,"column_end":49},"alias_span":null,"name":"Options","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":553},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1287,"byte_end":1298,"line_start":45,"line_end":45,"column_start":19,"column_end":30},"alias_span":null,"name":"BincodeRead","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1312,"byte_end":1324,"line_start":46,"line_end":46,"column_start":13,"column_end":25},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":884},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1342,"byte_end":1347,"line_start":47,"line_end":47,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1561},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1349,"byte_end":1358,"line_start":47,"line_end":47,"column_start":24,"column_end":33},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":882},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1360,"byte_end":1366,"line_start":47,"line_end":47,"column_start":35,"column_end":41},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1017},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1382,"byte_end":1392,"line_start":48,"line_end":48,"column_start":14,"column_end":24},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":0,"byte_end":6516,"line_start":1,"line_end":201,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":493},{"krate":0,"index":758},{"krate":0,"index":862},{"krate":0,"index":898},{"krate":0,"index":977},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1306},{"krate":0,"index":1310},{"krate":0,"index":1313}],"decl_id":null,"docs":" Bincode is a crate for encoding and decoding using a tiny binary\n serialization strategy.  Using it, you can easily go from having\n an object in memory, quickly serialize it to bytes, and then\n deserialize it back just as fast!","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"allow(unknown_lints, bare_trait_objects, deprecated)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":23,"byte_end":79,"line_start":2,"line_end":2,"column_start":1,"column_end":57}},{"value":"/ Bincode is a crate for encoding and decoding using a tiny binary","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":81,"byte_end":149,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ serialization strategy.  Using it, you can easily go from having","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":150,"byte_end":218,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ an object in memory, quickly serialize it to bytes, and then","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":219,"byte_end":283,"line_start":6,"line_end":6,"column_start":1,"column_end":65}},{"value":"/ deserialize it back just as fast!","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":284,"byte_end":321,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":322,"byte_end":325,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ### Using Basic Functions","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":326,"byte_end":355,"line_start":9,"line_end":9,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":356,"byte_end":359,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```edition2018","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":360,"byte_end":378,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/ fn main() {","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":379,"byte_end":394,"line_start":12,"line_end":12,"column_start":1,"column_end":16}},{"value":"/     // The object that we will serialize.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":395,"byte_end":440,"line_start":13,"line_end":13,"column_start":1,"column_end":46}},{"value":"/     let target: Option<String>  = Some(\"hello world\".to_string());","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":441,"byte_end":511,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":512,"byte_end":515,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/     let encoded: Vec<u8> = bincode::serialize(&target).unwrap();","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":516,"byte_end":584,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/     let decoded: Option<String> = bincode::deserialize(&encoded[..]).unwrap();","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":585,"byte_end":667,"line_start":17,"line_end":17,"column_start":1,"column_end":83}},{"value":"/     assert_eq!(target, decoded);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":668,"byte_end":704,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":705,"byte_end":710,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":711,"byte_end":718,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":719,"byte_end":722,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ### 128bit numbers","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":723,"byte_end":745,"line_start":22,"line_end":22,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":746,"byte_end":749,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Support for `i128` and `u128` is automatically enabled on Rust toolchains","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":750,"byte_end":827,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ greater than or equal to `1.26.0` and disabled for targets which do not support it","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":828,"byte_end":914,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"crate_name = \"bincode\"","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":973,"byte_end":999,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"crate_type = \"rlib\"","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1000,"byte_end":1023,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"crate_type = \"dylib\"","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1024,"byte_end":1048,"line_start":30,"line_end":30,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"config","qualname":"::config","value":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":78},{"krate":0,"index":275},{"krate":0,"index":341},{"krate":0,"index":358},{"krate":0,"index":1449},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":385},{"krate":0,"index":427},{"krate":0,"index":1455},{"krate":0,"index":1460},{"krate":0,"index":1464},{"krate":0,"index":1467},{"krate":0,"index":1472},{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1484},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1496},{"krate":0,"index":1500},{"krate":0,"index":429},{"krate":0,"index":433},{"krate":0,"index":437},{"krate":0,"index":441},{"krate":0,"index":445},{"krate":0,"index":453},{"krate":0,"index":461},{"krate":0,"index":469},{"krate":0,"index":477}],"decl_id":null,"docs":" `bincode` uses a Builder-pattern to configure the Serializers and Deserializers in this\n crate. This means that if you need to customize the behavior of `bincode`, you should create an\n instance of the `DefaultOptions` struct:","sig":null,"attributes":[{"value":"/ `bincode` uses a Builder-pattern to configure the Serializers and Deserializers in this","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6518,"byte_end":6609,"line_start":1,"line_end":1,"column_start":1,"column_end":92}},{"value":"/ crate. This means that if you need to customize the behavior of `bincode`, you should create an","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6610,"byte_end":6709,"line_start":2,"line_end":2,"column_start":1,"column_end":100}},{"value":"/ instance of the `DefaultOptions` struct:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6710,"byte_end":6754,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6755,"byte_end":6758,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6759,"byte_end":6770,"line_start":5,"line_end":5,"column_start":1,"column_end":12}},{"value":"/ use bincode::Options;","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6771,"byte_end":6796,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/ let my_options = bincode::DefaultOptions::new();","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6797,"byte_end":6849,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6850,"byte_end":6857,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6858,"byte_end":6861,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Options Struct vs bincode functions","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6862,"byte_end":6903,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6904,"byte_end":6907,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Due to historical reasons, the default options used by the `serialize()` and `deserialize()`","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":6908,"byte_end":7004,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ family of functions are different than the default options created by the `DefaultOptions` struct:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7005,"byte_end":7107,"line_start":13,"line_end":13,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7108,"byte_end":7111,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ |          | Byte limit | Endianness | Int Encoding | Trailing Behavior |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7112,"byte_end":7189,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ |----------|------------|------------|--------------|-------------------|","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7190,"byte_end":7267,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ | struct   | Unlimited  | Little     | Varint       | Reject            |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7268,"byte_end":7345,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ | function | Unlimited  | Little     | Fixint       | Allow             |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7346,"byte_end":7423,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7424,"byte_end":7427,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This means that if you want to use the `Serialize` / `Deserialize` structs with the same","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7428,"byte_end":7520,"line_start":20,"line_end":20,"column_start":1,"column_end":93}},{"value":"/ settings as the functions, you should adjust the `DefaultOptions` struct like so:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7521,"byte_end":7606,"line_start":21,"line_end":21,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7607,"byte_end":7610,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7611,"byte_end":7622,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use bincode::Options;","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7623,"byte_end":7648,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/ let my_options = bincode::DefaultOptions::new()","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7649,"byte_end":7700,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"/     .with_fixint_encoding()","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7701,"byte_end":7732,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/     .allow_trailing_bytes();","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7733,"byte_end":7765,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":7766,"byte_end":7773,"line_start":28,"line_end":28,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20118,"byte_end":20134,"line_start":1,"line_end":1,"column_start":11,"column_end":27},"name":"BincodeByteOrder","qualname":"::config::endian::BincodeByteOrder","value":"BincodeByteOrder","parent":null,"children":[{"krate":0,"index":71}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":71},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20146,"byte_end":20152,"line_start":2,"line_end":2,"column_start":10,"column_end":16},"name":"Endian","qualname":"::config::endian::BincodeByteOrder::Endian","value":"type Endian: ::byteorder::ByteOrder + 'static;","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1315},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20258,"byte_end":20270,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"LittleEndian","qualname":"::config::endian::LittleEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little-endian byte ordering.\n","sig":null,"attributes":[{"value":"/ Little-endian byte ordering.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20191,"byte_end":20223,"line_start":5,"line_end":5,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20337,"byte_end":20346,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"BigEndian","qualname":"::config::endian::BigEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Big-endian byte ordering.\n","sig":null,"attributes":[{"value":"/ Big-endian byte ordering.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20273,"byte_end":20302,"line_start":9,"line_end":9,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1325},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20435,"byte_end":20447,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"NativeEndian","qualname":"::config::endian::NativeEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" The native byte ordering of the current system.\n","sig":null,"attributes":[{"value":"/ The native byte ordering of the current system.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20349,"byte_end":20400,"line_start":13,"line_end":13,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":20845,"byte_end":20856,"line_start":8,"line_end":8,"column_start":11,"column_end":22},"name":"IntEncoding","qualname":"::config::int::IntEncoding","value":"IntEncoding","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":135},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1339},{"krate":0,"index":1342}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":20936,"byte_end":20944,"line_start":10,"line_end":10,"column_start":8,"column_end":16},"name":"u16_size","qualname":"::config::int::IntEncoding::u16_size","value":"pub fn u16_size(u16) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":20863,"byte_end":20928,"line_start":9,"line_end":9,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21038,"byte_end":21046,"line_start":12,"line_end":12,"column_start":8,"column_end":16},"name":"u32_size","qualname":"::config::int::IntEncoding::u32_size","value":"pub fn u32_size(u32) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":20965,"byte_end":21030,"line_start":11,"line_end":11,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21140,"byte_end":21148,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"u64_size","qualname":"::config::int::IntEncoding::u64_size","value":"pub fn u64_size(u64) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21067,"byte_end":21132,"line_start":13,"line_end":13,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21243,"byte_end":21251,"line_start":17,"line_end":17,"column_start":8,"column_end":16},"name":"i16_size","qualname":"::config::int::IntEncoding::i16_size","value":"pub fn i16_size(i16) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21170,"byte_end":21235,"line_start":16,"line_end":16,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21345,"byte_end":21353,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"i32_size","qualname":"::config::int::IntEncoding::i32_size","value":"pub fn i32_size(i32) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21272,"byte_end":21337,"line_start":18,"line_end":18,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21447,"byte_end":21455,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"i64_size","qualname":"::config::int::IntEncoding::i64_size","value":"pub fn i64_size(i64) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Gets the size (in bytes) that a value would be serialized to.\n","sig":null,"attributes":[{"value":"/ Gets the size (in bytes) that a value would be serialized to.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21374,"byte_end":21439,"line_start":20,"line_end":20,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21502,"byte_end":21510,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"len_size","qualname":"::config::int::IntEncoding::len_size","value":"pub fn len_size(usize) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21477,"byte_end":21494,"line_start":23,"line_end":23,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21641,"byte_end":21654,"line_start":30,"line_end":30,"column_start":8,"column_end":21},"name":"serialize_len","qualname":"::config::int::IntEncoding::serialize_len","value":"pub fn serialize_len<W: Write,\n                     O: Options>(&mut ::ser::Serializer<W, O>, usize)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Serializes a sequence length.\n","sig":null,"attributes":[{"value":"/ Serializes a sequence length.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21578,"byte_end":21611,"line_start":28,"line_end":28,"column_start":5,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21616,"byte_end":21633,"line_start":29,"line_end":29,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21822,"byte_end":21835,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"serialize_u16","qualname":"::config::int::IntEncoding::serialize_u16","value":"pub fn serialize_u16<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, u16)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":21949,"byte_end":21962,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"serialize_u32","qualname":"::config::int::IntEncoding::serialize_u32","value":"pub fn serialize_u32<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, u32)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22076,"byte_end":22089,"line_start":47,"line_end":47,"column_start":8,"column_end":21},"name":"serialize_u64","qualname":"::config::int::IntEncoding::serialize_u64","value":"pub fn serialize_u64<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, u64)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22203,"byte_end":22216,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"serialize_i16","qualname":"::config::int::IntEncoding::serialize_i16","value":"pub fn serialize_i16<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, i16)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22330,"byte_end":22343,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"serialize_i32","qualname":"::config::int::IntEncoding::serialize_i32","value":"pub fn serialize_i32<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, i32)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22457,"byte_end":22470,"line_start":62,"line_end":62,"column_start":8,"column_end":21},"name":"serialize_i64","qualname":"::config::int::IntEncoding::serialize_i64","value":"pub fn serialize_i64<W: Write, O: Options>(&mut ::ser::Serializer<W, O>, i64)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22646,"byte_end":22661,"line_start":69,"line_end":69,"column_start":8,"column_end":23},"name":"deserialize_len","qualname":"::config::int::IntEncoding::deserialize_len","value":"pub fn deserialize_len<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<usize>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Deserializes a sequence length.\n","sig":null,"attributes":[{"value":"/ Deserializes a sequence length.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22581,"byte_end":22616,"line_start":67,"line_end":67,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22621,"byte_end":22638,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22845,"byte_end":22860,"line_start":75,"line_end":75,"column_start":8,"column_end":23},"name":"deserialize_u16","qualname":"::config::int::IntEncoding::deserialize_u16","value":"pub fn deserialize_u16<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<u16>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":22973,"byte_end":22988,"line_start":79,"line_end":79,"column_start":8,"column_end":23},"name":"deserialize_u32","qualname":"::config::int::IntEncoding::deserialize_u32","value":"pub fn deserialize_u32<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<u32>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23101,"byte_end":23116,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"deserialize_u64","qualname":"::config::int::IntEncoding::deserialize_u64","value":"pub fn deserialize_u64<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<u64>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23229,"byte_end":23244,"line_start":87,"line_end":87,"column_start":8,"column_end":23},"name":"deserialize_i16","qualname":"::config::int::IntEncoding::deserialize_i16","value":"pub fn deserialize_i16<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<i16>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23357,"byte_end":23372,"line_start":91,"line_end":91,"column_start":8,"column_end":23},"name":"deserialize_i32","qualname":"::config::int::IntEncoding::deserialize_i32","value":"pub fn deserialize_i32<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<i32>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23485,"byte_end":23500,"line_start":95,"line_end":95,"column_start":8,"column_end":23},"name":"deserialize_i64","qualname":"::config::int::IntEncoding::deserialize_i64","value":"pub fn deserialize_i64<'de, R: BincodeRead,\n                       O: Options>(&mut ::de::Deserializer<R, O>)\n-> Result<i64>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23644,"byte_end":23653,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"u128_size","qualname":"::config::int::IntEncoding::u128_size","value":"pub fn u128_size(u128) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23682,"byte_end":23691,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"i128_size","qualname":"::config::int::IntEncoding::i128_size","value":"pub fn i128_size(i128) -> u64","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23720,"byte_end":23734,"line_start":102,"line_end":102,"column_start":12,"column_end":26},"name":"serialize_u128","qualname":"::config::int::IntEncoding::serialize_u128","value":"pub fn serialize_u128<W: Write, O: Options>(&mut ::Serializer<W, O>, u128)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23859,"byte_end":23875,"line_start":106,"line_end":106,"column_start":12,"column_end":28},"name":"deserialize_u128","qualname":"::config::int::IntEncoding::deserialize_u128","value":"pub fn deserialize_u128<'de, R: BincodeRead,\n                        O: Options>(&mut ::Deserializer<R, O>) -> Result<u128>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":23996,"byte_end":24010,"line_start":109,"line_end":109,"column_start":12,"column_end":26},"name":"serialize_i128","qualname":"::config::int::IntEncoding::serialize_i128","value":"pub fn serialize_i128<W: Write, O: Options>(&mut ::Serializer<W, O>, i128)\n-> Result<()>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24135,"byte_end":24151,"line_start":113,"line_end":113,"column_start":12,"column_end":28},"name":"deserialize_i128","qualname":"::config::int::IntEncoding::deserialize_i128","value":"pub fn deserialize_i128<'de, R: BincodeRead,\n                        O: Options>(&mut ::Deserializer<R, O>) -> Result<i128>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1346},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24475,"byte_end":24489,"line_start":125,"line_end":125,"column_start":12,"column_end":26},"name":"FixintEncoding","qualname":"::config::int::FixintEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Fixed-size integer encoding.","sig":null,"attributes":[{"value":"/ Fixed-size integer encoding.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24270,"byte_end":24302,"line_start":119,"line_end":119,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24303,"byte_end":24306,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ * Fixed size integers are encoded directly","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24307,"byte_end":24353,"line_start":121,"line_end":121,"column_start":1,"column_end":47}},{"value":"/ * Enum discriminants are encoded as u32","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24354,"byte_end":24397,"line_start":122,"line_end":122,"column_start":1,"column_end":44}},{"value":"/ * Lengths and usize are encoded as u64","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24398,"byte_end":24440,"line_start":123,"line_end":123,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1351},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":26212,"byte_end":26226,"line_start":170,"line_end":170,"column_start":12,"column_end":26},"name":"VarintEncoding","qualname":"::config::int::VarintEncoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Variable-size integer encoding (excepting [ui]8).","sig":null,"attributes":[{"value":"/ Variable-size integer encoding (excepting [ui]8).","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24492,"byte_end":24545,"line_start":127,"line_end":127,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24546,"byte_end":24549,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ Encoding an unsigned integer v (of any type excepting u8) works as follows:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24550,"byte_end":24629,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24630,"byte_end":24633,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ 1. If `u < 251`, encode it as a single byte with that value.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24634,"byte_end":24698,"line_start":131,"line_end":131,"column_start":1,"column_end":65}},{"value":"/ 2. If `251 <= u < 2**16`, encode it as a literal byte 251, followed by a u16 with value `u`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24699,"byte_end":24795,"line_start":132,"line_end":132,"column_start":1,"column_end":97}},{"value":"/ 3. If `2**16 <= u < 2**32`, encode it as a literal byte 252, followed by a u32 with value `u`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24796,"byte_end":24894,"line_start":133,"line_end":133,"column_start":1,"column_end":99}},{"value":"/ 4. If `2**32 <= u < 2**64`, encode it as a literal byte 253, followed by a u64 with value `u`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24895,"byte_end":24993,"line_start":134,"line_end":134,"column_start":1,"column_end":99}},{"value":"/ 5. If `2**64 <= u < 2**128`, encode it as a literal byte 254, followed by a","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":24994,"byte_end":25073,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/   u128 with value `u`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25074,"byte_end":25100,"line_start":136,"line_end":136,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25101,"byte_end":25104,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ Then, for signed integers, we first convert to unsigned using the zigzag algorithm,","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25105,"byte_end":25192,"line_start":138,"line_end":138,"column_start":1,"column_end":88}},{"value":"/ and then encode them as we do for unsigned integers generally. The reason we use this","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25193,"byte_end":25282,"line_start":139,"line_end":139,"column_start":1,"column_end":90}},{"value":"/ algorithm is that it encodes those values which are close to zero in less bytes; the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25283,"byte_end":25371,"line_start":140,"line_end":140,"column_start":1,"column_end":89}},{"value":"/ obvious algorithm, where we encode the cast values, gives a very large encoding for all","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25372,"byte_end":25463,"line_start":141,"line_end":141,"column_start":1,"column_end":92}},{"value":"/ negative values.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25464,"byte_end":25484,"line_start":142,"line_end":142,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25485,"byte_end":25488,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ The zigzag algorithm is defined as follows:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25489,"byte_end":25536,"line_start":144,"line_end":144,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25537,"byte_end":25540,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25541,"byte_end":25554,"line_start":146,"line_end":146,"column_start":1,"column_end":14}},{"value":"/ fn zigzag(v: Signed) -> Unsigned {","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25555,"byte_end":25593,"line_start":147,"line_end":147,"column_start":1,"column_end":39}},{"value":"/     match v {","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25594,"byte_end":25611,"line_start":148,"line_end":148,"column_start":1,"column_end":18}},{"value":"/         0 => 0,","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25612,"byte_end":25631,"line_start":149,"line_end":149,"column_start":1,"column_end":20}},{"value":"/         v if v < 0 => |v| * 2 - 1","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25632,"byte_end":25669,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/         v if v > 0 => v * 2","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25670,"byte_end":25701,"line_start":151,"line_end":151,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25702,"byte_end":25711,"line_start":152,"line_end":152,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25712,"byte_end":25717,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25718,"byte_end":25725,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25726,"byte_end":25729,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ And works such that:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25730,"byte_end":25754,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25755,"byte_end":25758,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25759,"byte_end":25772,"line_start":158,"line_end":158,"column_start":1,"column_end":14}},{"value":"/ assert_eq!(zigzag(0), 0);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25773,"byte_end":25802,"line_start":159,"line_end":159,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(zigzag(-1), 1);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25803,"byte_end":25833,"line_start":160,"line_end":160,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(zigzag(1), 2);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25834,"byte_end":25863,"line_start":161,"line_end":161,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(zigzag(-2), 3);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25864,"byte_end":25894,"line_start":162,"line_end":162,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(zigzag(2), 4);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25895,"byte_end":25924,"line_start":163,"line_end":163,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(zigzag(i64::min_value()), u64::max_value());","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25925,"byte_end":25984,"line_start":164,"line_end":164,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25985,"byte_end":25992,"line_start":165,"line_end":165,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25993,"byte_end":25996,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ Note that u256 and the like are unsupported by this format; if and when they are added to the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":25997,"byte_end":26094,"line_start":167,"line_end":167,"column_start":1,"column_end":98}},{"value":"/ language, they may be supported via the extension point given by the 255 byte.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":26095,"byte_end":26177,"line_start":168,"line_end":168,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1398},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43610,"byte_end":43616,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"Config","qualname":"::config::legacy::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400}],"decl_id":null,"docs":" A configuration builder whose options Bincode will use\n while serializing and deserializing.","sig":null,"attributes":[{"value":"/ A configuration builder whose options Bincode will use","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42696,"byte_end":42754,"line_start":10,"line_end":10,"column_start":1,"column_end":59}},{"value":"/ while serializing and deserializing.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42755,"byte_end":42795,"line_start":11,"line_end":11,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42796,"byte_end":42799,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ### Options","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42800,"byte_end":42815,"line_start":13,"line_end":13,"column_start":1,"column_end":16}},{"value":"/ Endianness: The endianness with which multi-byte integers will be read/written.  *default: little endian*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42816,"byte_end":42925,"line_start":14,"line_end":14,"column_start":1,"column_end":110}},{"value":"/ Limit: The maximum number of bytes that will be read/written in a bincode serialize/deserialize. *default: unlimited*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":42926,"byte_end":43047,"line_start":15,"line_end":15,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43048,"byte_end":43051,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Byte Limit Details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43052,"byte_end":43078,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/ The purpose of byte-limiting is to prevent Denial-Of-Service attacks whereby malicious attackers get bincode","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43079,"byte_end":43191,"line_start":18,"line_end":18,"column_start":1,"column_end":113}},{"value":"/ deserialization to crash your process by allocating too much memory or keeping a connection open for too long.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43192,"byte_end":43306,"line_start":19,"line_end":19,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43307,"byte_end":43310,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ When a byte limit is set, bincode will return `Err` on any deserialization that goes over the limit, or any","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43311,"byte_end":43422,"line_start":21,"line_end":21,"column_start":1,"column_end":112}},{"value":"/ serialization that goes over the limit.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43423,"byte_end":43466,"line_start":22,"line_end":22,"column_start":1,"column_end":44}},{"value":"deprecated(since = \"1.3.0\", note =\n             \"please use the `DefaultOptions`/`Options` system instead\")","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":43491,"byte_end":43598,"line_start":24,"line_end":27,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46012,"byte_end":46020,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"no_limit","qualname":"<Config>::no_limit","value":"pub fn no_limit(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to be unlimited.\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to be unlimited.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":45909,"byte_end":45949,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":45954,"byte_end":45978,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":45983,"byte_end":46000,"line_start":113,"line_end":113,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46185,"byte_end":46190,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"limit","qualname":"<Config>::limit","value":"pub fn limit(&mut Self, u64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to `limit`.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to `limit`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46116,"byte_end":46151,"line_start":119,"line_end":119,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46156,"byte_end":46173,"line_start":120,"line_end":120,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46406,"byte_end":46419,"line_start":129,"line_end":129,"column_start":12,"column_end":25},"name":"little_endian","qualname":"<Config>::little_endian","value":"pub fn little_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to little-endian\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the endianness to little-endian","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46303,"byte_end":46343,"line_start":126,"line_end":126,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46348,"byte_end":46372,"line_start":127,"line_end":127,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46377,"byte_end":46394,"line_start":128,"line_end":128,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46585,"byte_end":46595,"line_start":136,"line_end":136,"column_start":12,"column_end":22},"name":"big_endian","qualname":"<Config>::big_endian","value":"pub fn big_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to big-endian\n","sig":null,"attributes":[{"value":"/ Sets the endianness to big-endian","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46514,"byte_end":46551,"line_start":134,"line_end":134,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46556,"byte_end":46573,"line_start":135,"line_end":135,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46781,"byte_end":46794,"line_start":143,"line_end":143,"column_start":12,"column_end":25},"name":"native_endian","qualname":"<Config>::native_endian","value":"pub fn native_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to the the machine-native endianness\n","sig":null,"attributes":[{"value":"/ Sets the endianness to the the machine-native endianness","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46687,"byte_end":46747,"line_start":141,"line_end":141,"column_start":5,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46752,"byte_end":46769,"line_start":142,"line_end":142,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47006,"byte_end":47015,"line_start":150,"line_end":150,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Config>::serialize","value":"pub fn serialize<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using this configuration\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46889,"byte_end":46972,"line_start":148,"line_end":148,"column_start":5,"column_end":88}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":46977,"byte_end":46994,"line_start":149,"line_end":149,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47288,"byte_end":47303,"line_start":156,"line_end":156,"column_start":12,"column_end":27},"name":"serialized_size","qualname":"<Config>::serialized_size","value":"pub fn serialized_size<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with this configuration\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47158,"byte_end":47254,"line_start":154,"line_end":154,"column_start":5,"column_end":101}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47259,"byte_end":47276,"line_start":155,"line_end":155,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47725,"byte_end":47739,"line_start":165,"line_end":165,"column_start":12,"column_end":26},"name":"serialize_into","qualname":"<Config>::serialize_into","value":"pub fn serialize_into<W: Write, T: ?Sized + serde::Serialize>(&Self, W, &T)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using this configuration","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47448,"byte_end":47522,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47527,"byte_end":47530,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47535,"byte_end":47622,"line_start":162,"line_end":162,"column_start":5,"column_end":92}},{"value":"/ is returned and *no bytes* will be written into the `Writer`","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47627,"byte_end":47691,"line_start":163,"line_end":163,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47696,"byte_end":47713,"line_start":164,"line_end":164,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48048,"byte_end":48059,"line_start":175,"line_end":175,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Config>::deserialize","value":"pub fn deserialize<'a, T: serde::Deserialize>(&Self, &'a [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using this configuration\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":47932,"byte_end":48014,"line_start":173,"line_end":173,"column_start":5,"column_end":87}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48019,"byte_end":48036,"line_start":174,"line_end":174,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48284,"byte_end":48304,"line_start":182,"line_end":182,"column_start":12,"column_end":32},"name":"deserialize_in_place","qualname":"<Config>::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(&Self, R, &mut T) -> Result<()> where\nR: BincodeRead, T: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" TODO: document\n","sig":null,"attributes":[{"value":"/ TODO: document","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48213,"byte_end":48231,"line_start":179,"line_end":179,"column_start":5,"column_end":23}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48255,"byte_end":48272,"line_start":181,"line_end":181,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48656,"byte_end":48672,"line_start":192,"line_end":192,"column_start":12,"column_end":28},"name":"deserialize_seed","qualname":"<Config>::deserialize_seed","value":"pub fn deserialize_seed<'a, T: serde::de::DeserializeSeed>(&Self, T, &'a [u8])\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes with state `seed` using this configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes with state `seed` using this configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48545,"byte_end":48622,"line_start":190,"line_end":190,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48627,"byte_end":48644,"line_start":191,"line_end":191,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49083,"byte_end":49099,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"deserialize_from","qualname":"<Config>::deserialize_from","value":"pub fn deserialize_from<R: Read, T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48892,"byte_end":48968,"line_start":200,"line_end":200,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48973,"byte_end":48976,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":48981,"byte_end":49049,"line_start":202,"line_end":202,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49054,"byte_end":49071,"line_start":203,"line_end":203,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49495,"byte_end":49516,"line_start":215,"line_end":215,"column_start":12,"column_end":33},"name":"deserialize_from_seed","qualname":"<Config>::deserialize_from_seed","value":"pub fn deserialize_from_seed<'a, R: Read,\n                             T: serde::de::DeserializeSeed>(&Self, T, R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er with state `seed` using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er with state `seed` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49286,"byte_end":49380,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49385,"byte_end":49388,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49393,"byte_end":49461,"line_start":213,"line_end":213,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49466,"byte_end":49483,"line_start":214,"line_end":214,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50084,"byte_end":50107,"line_start":229,"line_end":229,"column_start":12,"column_end":35},"name":"deserialize_from_custom","qualname":"<Config>::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R: BincodeRead,\n                               T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49745,"byte_end":49834,"line_start":223,"line_end":223,"column_start":5,"column_end":94}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49839,"byte_end":49922,"line_start":224,"line_end":224,"column_start":5,"column_end":88}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49927,"byte_end":49969,"line_start":225,"line_end":225,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49974,"byte_end":49977,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":49982,"byte_end":50050,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50055,"byte_end":50072,"line_start":228,"line_end":228,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50673,"byte_end":50701,"line_start":242,"line_end":242,"column_start":12,"column_end":40},"name":"deserialize_from_custom_seed","qualname":"<Config>::deserialize_from_custom_seed","value":"pub fn deserialize_from_custom_seed<'a, R: BincodeRead,\n                                    T: serde::de::DeserializeSeed>(&Self, T,\n                                                                   R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er with state `seed` using the default\n configuration. It is highly recommended to use `deserialize_from` unless you need to\n implement `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er with state `seed` using the default","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50316,"byte_end":50408,"line_start":236,"line_end":236,"column_start":5,"column_end":97}},{"value":"/ configuration. It is highly recommended to use `deserialize_from` unless you need to","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50413,"byte_end":50501,"line_start":237,"line_end":237,"column_start":5,"column_end":93}},{"value":"/ implement `BincodeRead` for performance reasons.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50506,"byte_end":50558,"line_start":238,"line_end":238,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50563,"byte_end":50566,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50571,"byte_end":50639,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":50644,"byte_end":50661,"line_start":241,"line_end":241,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":349},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51118,"byte_end":51127,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SizeLimit","qualname":"::config::limit::SizeLimit","value":"SizeLimit","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351}],"decl_id":null,"docs":" A trait for stopping serialization and deserialization when a certain limit has been reached.\n","sig":null,"attributes":[{"value":"/ A trait for stopping serialization and deserialization when a certain limit has been reached.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51010,"byte_end":51107,"line_start":3,"line_end":3,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51275,"byte_end":51278,"line_start":7,"line_end":7,"column_start":8,"column_end":11},"name":"add","qualname":"::config::limit::SizeLimit::add","value":"pub fn add(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Tells the SizeLimit that a certain number of bytes has been\n read or written.  Returns Err if the limit has been exceeded.\n","sig":null,"attributes":[{"value":"/ Tells the SizeLimit that a certain number of bytes has been","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51134,"byte_end":51197,"line_start":5,"line_end":5,"column_start":5,"column_end":68}},{"value":"/ read or written.  Returns Err if the limit has been exceeded.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51202,"byte_end":51267,"line_start":6,"line_end":6,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51367,"byte_end":51372,"line_start":9,"line_end":9,"column_start":8,"column_end":13},"name":"limit","qualname":"::config::limit::SizeLimit::limit","value":"pub fn limit(&Self) -> Option<u64>","parent":{"krate":0,"index":349},"children":[],"decl_id":null,"docs":" Returns the hard limit (if one exists)\n","sig":null,"attributes":[{"value":"/ Returns the hard limit (if one exists)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51317,"byte_end":51359,"line_start":8,"line_end":8,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1428},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51542,"byte_end":51549,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Bounded","qualname":"::config::limit::Bounded","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SizeLimit that restricts serialized or deserialized messages from\n exceeding a certain byte length.\n","sig":null,"attributes":[{"value":"/ A SizeLimit that restricts serialized or deserialized messages from","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51399,"byte_end":51470,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ exceeding a certain byte length.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51471,"byte_end":51507,"line_start":13,"line_end":13,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1430},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51550,"byte_end":51557,"line_start":15,"line_end":15,"column_start":20,"column_end":27},"name":"0","qualname":"::config::limit::Bounded::0","value":"u64","parent":{"krate":0,"index":1428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1434},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51706,"byte_end":51714,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"Infinite","qualname":"::config::limit::Infinite","value":"","parent":null,"children":[],"decl_id":null,"docs":" A SizeLimit without a limit!\n Use this if you don't care about the size of encoded or decoded messages.\n","sig":null,"attributes":[{"value":"/ A SizeLimit without a limit!","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51561,"byte_end":51593,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ Use this if you don't care about the size of encoded or decoded messages.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51594,"byte_end":51671,"line_start":18,"line_end":18,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52387,"byte_end":52400,"line_start":5,"line_end":5,"column_start":11,"column_end":24},"name":"TrailingBytes","qualname":"::config::trailing::TrailingBytes","value":"TrailingBytes","parent":null,"children":[{"krate":0,"index":370}],"decl_id":null,"docs":" A trait for erroring deserialization if not all bytes were read.\n","sig":null,"attributes":[{"value":"/ A trait for erroring deserialization if not all bytes were read.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52308,"byte_end":52376,"line_start":4,"line_end":4,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52507,"byte_end":52516,"line_start":7,"line_end":7,"column_start":8,"column_end":17},"name":"check_end","qualname":"::config::trailing::TrailingBytes::check_end","value":"pub fn check_end(&SliceReader) -> Result<()>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Checks a given slice reader to determine if deserialization used all bytes in the slice.\n","sig":null,"attributes":[{"value":"/ Checks a given slice reader to determine if deserialization used all bytes in the slice.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52407,"byte_end":52499,"line_start":6,"line_end":6,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1439},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52682,"byte_end":52695,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"AllowTrailing","qualname":"::config::trailing::AllowTrailing","value":"","parent":null,"children":[],"decl_id":null,"docs":" A TrailingBytes config that will allow trailing bytes in slices after deserialization.\n","sig":null,"attributes":[{"value":"/ A TrailingBytes config that will allow trailing bytes in slices after deserialization.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52557,"byte_end":52647,"line_start":10,"line_end":10,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1444},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52874,"byte_end":52888,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"RejectTrailing","qualname":"::config::trailing::RejectTrailing","value":"","parent":null,"children":[],"decl_id":null,"docs":" A TrailingBytes config that will cause bincode to produce an error if bytes are left over in the slice when deserialization is complete.\n","sig":null,"attributes":[{"value":"/ A TrailingBytes config that will cause bincode to produce an error if bytes are left over in the slice when deserialization is complete.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52698,"byte_end":52838,"line_start":14,"line_end":14,"column_start":1,"column_end":141}}]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9338,"byte_end":9352,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"DefaultOptions","qualname":"::config::DefaultOptions","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default options for bincode serialization/deserialization.","sig":null,"attributes":[{"value":"/ The default options for bincode serialization/deserialization.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8397,"byte_end":8463,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8464,"byte_end":8467,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ### Defaults","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8468,"byte_end":8484,"line_start":56,"line_end":56,"column_start":1,"column_end":17}},{"value":"/ By default bincode will use little-endian encoding for multi-byte integers, and will not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8485,"byte_end":8577,"line_start":57,"line_end":57,"column_start":1,"column_end":93}},{"value":"/ limit the number of serialized/deserialized bytes.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8578,"byte_end":8632,"line_start":58,"line_end":58,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8633,"byte_end":8636,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ### Configuring `DefaultOptions`","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8637,"byte_end":8673,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8674,"byte_end":8677,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ `DefaultOptions` implements the [Options] trait, which means it exposes functions to change the behavior of bincode.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8678,"byte_end":8798,"line_start":62,"line_end":62,"column_start":1,"column_end":121}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8799,"byte_end":8802,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ For example, if you wanted to limit the bincode deserializer to 1 kilobyte of user input:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8803,"byte_end":8896,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8897,"byte_end":8900,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8901,"byte_end":8912,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ use bincode::Options;","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8913,"byte_end":8938,"line_start":67,"line_end":67,"column_start":1,"column_end":26}},{"value":"/ let my_options = bincode::DefaultOptions::new().with_limit(1024);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":8939,"byte_end":9008,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9009,"byte_end":9016,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9017,"byte_end":9020,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ### DefaultOptions struct vs. functions","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9021,"byte_end":9064,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9065,"byte_end":9068,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The default configuration used by this struct is not the same as that used by the bincode","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9069,"byte_end":9162,"line_start":73,"line_end":73,"column_start":1,"column_end":94}},{"value":"/ helper functions in the root of this crate. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9163,"byte_end":9218,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/ [config](index.html#options-struct-vs-bincode-functions) module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9219,"byte_end":9303,"line_start":75,"line_end":75,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9706,"byte_end":9709,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<DefaultOptions>::new","value":"pub fn new() -> DefaultOptions","parent":null,"children":[],"decl_id":null,"docs":" Get a default configuration object.","sig":null,"attributes":[{"value":"/ Get a default configuration object.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9391,"byte_end":9430,"line_start":80,"line_end":80,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9435,"byte_end":9438,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ### Default Configuration:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9443,"byte_end":9473,"line_start":82,"line_end":82,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9478,"byte_end":9481,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ | Byte limit | Endianness | Int Encoding | Trailing Behavior |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9486,"byte_end":9552,"line_start":84,"line_end":84,"column_start":5,"column_end":71}},{"value":"/ |------------|------------|--------------|-------------------|","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9557,"byte_end":9623,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ | Unlimited  | Little     | Varint       | Reject            |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9628,"byte_end":9694,"line_start":86,"line_end":86,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":385},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11162,"byte_end":11169,"line_start":128,"line_end":128,"column_start":11,"column_end":18},"name":"Options","qualname":"::config::Options","value":"Options: InternalOptions + Sized","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":419},{"krate":0,"index":423}],"decl_id":null,"docs":" A configuration builder trait whose options Bincode will use\n while serializing and deserializing.","sig":null,"attributes":[{"value":"/ A configuration builder trait whose options Bincode will use","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10135,"byte_end":10199,"line_start":110,"line_end":110,"column_start":1,"column_end":65}},{"value":"/ while serializing and deserializing.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10200,"byte_end":10240,"line_start":111,"line_end":111,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10241,"byte_end":10244,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ### Options","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10245,"byte_end":10260,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/ Endianness: The endianness with which multi-byte integers will be read/written.  *default: little endian*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10261,"byte_end":10370,"line_start":114,"line_end":114,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10371,"byte_end":10374,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Limit: The maximum number of bytes that will be read/written in a bincode serialize/deserialize. *default: unlimited*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10375,"byte_end":10496,"line_start":116,"line_end":116,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10497,"byte_end":10500,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Int Encoding: The encoding used for numbers, enum discriminants, and lengths. *default: varint*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10501,"byte_end":10600,"line_start":118,"line_end":118,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10601,"byte_end":10604,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Trailing Behavior: The behavior when there are trailing bytes left over in a slice after deserialization. *default: reject*","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10605,"byte_end":10732,"line_start":120,"line_end":120,"column_start":1,"column_end":128}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10733,"byte_end":10736,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ### Byte Limit Details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10737,"byte_end":10763,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/ The purpose of byte-limiting is to prevent Denial-Of-Service attacks whereby malicious attackers get bincode","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10764,"byte_end":10876,"line_start":123,"line_end":123,"column_start":1,"column_end":113}},{"value":"/ deserialization to crash your process by allocating too much memory or keeping a connection open for too long.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10877,"byte_end":10991,"line_start":124,"line_end":124,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10992,"byte_end":10995,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ When a byte limit is set, bincode will return `Err` on any deserialization that goes over the limit, or any","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":10996,"byte_end":11107,"line_start":126,"line_end":126,"column_start":1,"column_end":112}},{"value":"/ serialization that goes over the limit.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11108,"byte_end":11151,"line_start":127,"line_end":127,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11278,"byte_end":11291,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"with_no_limit","qualname":"::config::Options::with_no_limit","value":"pub fn with_no_limit(Self) -> WithOtherLimit<Self, Infinite>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the byte limit to be unlimited.\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to be unlimited.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11201,"byte_end":11241,"line_start":129,"line_end":129,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11246,"byte_end":11270,"line_start":130,"line_end":130,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11432,"byte_end":11442,"line_start":136,"line_end":136,"column_start":8,"column_end":18},"name":"with_limit","qualname":"::config::Options::with_limit","value":"pub fn with_limit(Self, u64) -> WithOtherLimit<Self, Bounded>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the byte limit to `limit`.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to `limit`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11389,"byte_end":11424,"line_start":135,"line_end":135,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11634,"byte_end":11652,"line_start":142,"line_end":142,"column_start":8,"column_end":26},"name":"with_little_endian","qualname":"::config::Options::with_little_endian","value":"pub fn with_little_endian(Self) -> WithOtherEndian<Self, LittleEndian>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the endianness to little-endian\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the endianness to little-endian","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11557,"byte_end":11597,"line_start":140,"line_end":140,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11602,"byte_end":11626,"line_start":141,"line_end":141,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11791,"byte_end":11806,"line_start":147,"line_end":147,"column_start":8,"column_end":23},"name":"with_big_endian","qualname":"::config::Options::with_big_endian","value":"pub fn with_big_endian(Self) -> WithOtherEndian<Self, BigEndian>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the endianness to big-endian\n","sig":null,"attributes":[{"value":"/ Sets the endianness to big-endian","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11746,"byte_end":11783,"line_start":146,"line_end":146,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11965,"byte_end":11983,"line_start":152,"line_end":152,"column_start":8,"column_end":26},"name":"with_native_endian","qualname":"::config::Options::with_native_endian","value":"pub fn with_native_endian(Self) -> WithOtherEndian<Self, NativeEndian>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the endianness to the the machine-native endianness\n","sig":null,"attributes":[{"value":"/ Sets the endianness to the the machine-native endianness","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11897,"byte_end":11957,"line_start":151,"line_end":151,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12123,"byte_end":12143,"line_start":157,"line_end":157,"column_start":8,"column_end":28},"name":"with_varint_encoding","qualname":"::config::Options::with_varint_encoding","value":"pub fn with_varint_encoding(Self)\n-> WithOtherIntEncoding<Self, VarintEncoding>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the length encoding to varint\n","sig":null,"attributes":[{"value":"/ Sets the length encoding to varint","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12077,"byte_end":12115,"line_start":156,"line_end":156,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12297,"byte_end":12317,"line_start":162,"line_end":162,"column_start":8,"column_end":28},"name":"with_fixint_encoding","qualname":"::config::Options::with_fixint_encoding","value":"pub fn with_fixint_encoding(Self)\n-> WithOtherIntEncoding<Self, FixintEncoding>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the length encoding to be fixed\n","sig":null,"attributes":[{"value":"/ Sets the length encoding to be fixed","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12249,"byte_end":12289,"line_start":161,"line_end":161,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12481,"byte_end":12502,"line_start":167,"line_end":167,"column_start":8,"column_end":29},"name":"reject_trailing_bytes","qualname":"::config::Options::reject_trailing_bytes","value":"pub fn reject_trailing_bytes(Self) -> WithOtherTrailing<Self, RejectTrailing>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the deserializer to reject trailing bytes\n","sig":null,"attributes":[{"value":"/ Sets the deserializer to reject trailing bytes","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12423,"byte_end":12473,"line_start":166,"line_end":166,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12659,"byte_end":12679,"line_start":172,"line_end":172,"column_start":8,"column_end":28},"name":"allow_trailing_bytes","qualname":"::config::Options::allow_trailing_bytes","value":"pub fn allow_trailing_bytes(Self) -> WithOtherTrailing<Self, AllowTrailing>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Sets the deserializer to allow trailing bytes\n","sig":null,"attributes":[{"value":"/ Sets the deserializer to allow trailing bytes","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12602,"byte_end":12651,"line_start":171,"line_end":171,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12891,"byte_end":12900,"line_start":178,"line_end":178,"column_start":8,"column_end":17},"name":"serialize","qualname":"::config::Options::serialize","value":"pub fn serialize<S: ?Sized + serde::Serialize>(Self, &S) -> Result<Vec<u8>>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using this configuration\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12778,"byte_end":12861,"line_start":176,"line_end":176,"column_start":5,"column_end":88}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":12866,"byte_end":12883,"line_start":177,"line_end":177,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13141,"byte_end":13156,"line_start":184,"line_end":184,"column_start":8,"column_end":23},"name":"serialized_size","qualname":"::config::Options::serialized_size","value":"pub fn serialized_size<T: ?Sized + serde::Serialize>(Self, &T) -> Result<u64>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with this configuration\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13015,"byte_end":13111,"line_start":182,"line_end":182,"column_start":5,"column_end":101}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13116,"byte_end":13133,"line_start":183,"line_end":183,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13546,"byte_end":13560,"line_start":193,"line_end":193,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::config::Options::serialize_into","value":"pub fn serialize_into<W: Write, T: ?Sized + serde::Serialize>(Self, W, &T)\n-> Result<()>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using this configuration","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13273,"byte_end":13347,"line_start":188,"line_end":188,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13352,"byte_end":13355,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13360,"byte_end":13447,"line_start":190,"line_end":190,"column_start":5,"column_end":92}},{"value":"/ is returned and *no bytes* will be written into the `Writer`","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13452,"byte_end":13516,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13521,"byte_end":13538,"line_start":192,"line_end":192,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13806,"byte_end":13817,"line_start":199,"line_end":199,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::config::Options::deserialize","value":"pub fn deserialize<'a, T: serde::Deserialize>(Self, &'a [u8]) -> Result<T>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using this configuration\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13694,"byte_end":13776,"line_start":197,"line_end":197,"column_start":5,"column_end":87}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13781,"byte_end":13798,"line_start":198,"line_end":198,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14010,"byte_end":14030,"line_start":206,"line_end":206,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"::config::Options::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(Self, R, &mut T) -> Result<()> where\nR: BincodeRead, T: serde::de::Deserialize","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" TODO: document\n","sig":null,"attributes":[{"value":"/ TODO: document","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13943,"byte_end":13961,"line_start":203,"line_end":203,"column_start":5,"column_end":23}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":13985,"byte_end":14002,"line_start":205,"line_end":205,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14350,"byte_end":14366,"line_start":216,"line_end":216,"column_start":8,"column_end":24},"name":"deserialize_seed","qualname":"::config::Options::deserialize_seed","value":"pub fn deserialize_seed<'a, T: serde::de::DeserializeSeed>(Self, T, &'a [u8])\n-> Result<T::Value>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes with state `seed` using this configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes with state `seed` using this configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14243,"byte_end":14320,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14325,"byte_end":14342,"line_start":215,"line_end":215,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14745,"byte_end":14761,"line_start":228,"line_end":228,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::config::Options::deserialize_from","value":"pub fn deserialize_from<R: Read, T: serde::de::DeserializeOwned>(Self, R)\n-> Result<T>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14558,"byte_end":14634,"line_start":224,"line_end":224,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14639,"byte_end":14642,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14647,"byte_end":14715,"line_start":226,"line_end":226,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14720,"byte_end":14737,"line_start":227,"line_end":227,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15102,"byte_end":15123,"line_start":236,"line_end":236,"column_start":8,"column_end":29},"name":"deserialize_from_seed","qualname":"::config::Options::deserialize_from_seed","value":"pub fn deserialize_from_seed<'a, R: Read,\n                             T: serde::de::DeserializeSeed>(Self, T, R)\n-> Result<T::Value>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er with state `seed` using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er with state `seed` using this configuration","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14897,"byte_end":14991,"line_start":232,"line_end":232,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":14996,"byte_end":14999,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15004,"byte_end":15072,"line_start":234,"line_end":234,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15077,"byte_end":15094,"line_start":235,"line_end":235,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15659,"byte_end":15682,"line_start":250,"line_end":250,"column_start":8,"column_end":31},"name":"deserialize_from_custom","qualname":"::config::Options::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R: BincodeRead,\n                               T: serde::de::DeserializeOwned>(Self, R)\n-> Result<T>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15324,"byte_end":15413,"line_start":244,"line_end":244,"column_start":5,"column_end":94}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15418,"byte_end":15501,"line_start":245,"line_end":245,"column_start":5,"column_end":88}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15506,"byte_end":15548,"line_start":246,"line_end":246,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15553,"byte_end":15556,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15561,"byte_end":15629,"line_start":248,"line_end":248,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15634,"byte_end":15651,"line_start":249,"line_end":249,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16216,"byte_end":16244,"line_start":263,"line_end":263,"column_start":8,"column_end":36},"name":"deserialize_from_custom_seed","qualname":"::config::Options::deserialize_from_custom_seed","value":"pub fn deserialize_from_custom_seed<'a, R: BincodeRead,\n                                    T: serde::de::DeserializeSeed>(Self, T, R)\n-> Result<T::Value>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er with state `seed` using the default\n configuration. It is highly recommended to use `deserialize_from` unless you need to\n implement `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er with state `seed` using the default","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15863,"byte_end":15955,"line_start":257,"line_end":257,"column_start":5,"column_end":97}},{"value":"/ configuration. It is highly recommended to use `deserialize_from` unless you need to","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":15960,"byte_end":16048,"line_start":258,"line_end":258,"column_start":5,"column_end":93}},{"value":"/ implement `BincodeRead` for performance reasons.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16053,"byte_end":16105,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16110,"byte_end":16113,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16118,"byte_end":16186,"line_start":261,"line_end":261,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16191,"byte_end":16208,"line_start":262,"line_end":262,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1455},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16598,"byte_end":16612,"line_start":276,"line_end":276,"column_start":12,"column_end":26},"name":"WithOtherLimit","qualname":"::config::WithOtherLimit","value":"WithOtherLimit {  }","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459}],"decl_id":null,"docs":" A configuration struct with a user-specified byte limit\n","sig":null,"attributes":[{"value":"/ A configuration struct with a user-specified byte limit","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16504,"byte_end":16563,"line_start":274,"line_end":274,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1467},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16786,"byte_end":16801,"line_start":283,"line_end":283,"column_start":12,"column_end":27},"name":"WithOtherEndian","qualname":"::config::WithOtherEndian","value":"WithOtherEndian {  }","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471}],"decl_id":null,"docs":" A configuration struct with a user-specified endian order\n","sig":null,"attributes":[{"value":"/ A configuration struct with a user-specified endian order","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16690,"byte_end":16751,"line_start":281,"line_end":281,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1479},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16984,"byte_end":17004,"line_start":290,"line_end":290,"column_start":12,"column_end":32},"name":"WithOtherIntEncoding","qualname":"::config::WithOtherIntEncoding","value":"WithOtherIntEncoding {  }","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483}],"decl_id":null,"docs":" A configuration struct with a user-specified length encoding\n","sig":null,"attributes":[{"value":"/ A configuration struct with a user-specified length encoding","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16885,"byte_end":16949,"line_start":288,"line_end":288,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1491},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17191,"byte_end":17208,"line_start":297,"line_end":297,"column_start":12,"column_end":29},"name":"WithOtherTrailing","qualname":"::config::WithOtherTrailing","value":"WithOtherTrailing {  }","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":" A configuration struct with a user-specified trailing bytes behavior.\n","sig":null,"attributes":[{"value":"/ A configuration struct with a user-specified trailing bytes behavior.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17083,"byte_end":17156,"line_start":295,"line_end":295,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":479},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19513,"byte_end":19528,"line_start":388,"line_end":388,"column_start":15,"column_end":30},"name":"InternalOptions","qualname":"::config::internal::InternalOptions","value":"InternalOptions","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":480},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19544,"byte_end":19549,"line_start":389,"line_end":389,"column_start":14,"column_end":19},"name":"Limit","qualname":"::config::internal::InternalOptions::Limit","value":"type Limit: SizeLimit + 'static;","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":481},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19585,"byte_end":19591,"line_start":390,"line_end":390,"column_start":14,"column_end":20},"name":"Endian","qualname":"::config::internal::InternalOptions::Endian","value":"type Endian: BincodeByteOrder + 'static;","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":482},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19634,"byte_end":19645,"line_start":391,"line_end":391,"column_start":14,"column_end":25},"name":"IntEncoding","qualname":"::config::internal::InternalOptions::IntEncoding","value":"type IntEncoding: IntEncoding + 'static;","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":483},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19683,"byte_end":19691,"line_start":392,"line_end":392,"column_start":14,"column_end":22},"name":"Trailing","qualname":"::config::internal::InternalOptions::Trailing","value":"type Trailing: TrailingBytes + 'static;","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19730,"byte_end":19735,"line_start":394,"line_end":394,"column_start":12,"column_end":17},"name":"limit","qualname":"::config::internal::InternalOptions::limit","value":"pub fn limit(&mut Self) -> &mut Self::Limit","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":493},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"de","qualname":"::de","value":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":609},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":620},{"krate":0,"index":624},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":742},{"krate":0,"index":755},{"krate":0,"index":757}],"decl_id":null,"docs":" Deserialize bincode data to a Rust data structure.\n","sig":null,"attributes":[{"value":"/ Deserialize bincode data to a Rust data structure.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1100,"byte_end":1154,"line_start":36,"line_end":36,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":543},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::de::read","value":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":580},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":598},{"krate":0,"index":601}],"decl_id":null,"docs":" Specialized ways to read data into bincode.\n","sig":null,"attributes":[{"value":"/ Specialized ways to read data into bincode.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53669,"byte_end":53716,"line_start":12,"line_end":12,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":553},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69084,"byte_end":69095,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"BincodeRead","qualname":"::de::read::BincodeRead","value":"BincodeRead<'storage>: io::Read","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":558}],"decl_id":null,"docs":" An optional Read trait for advanced Bincode usage.","sig":null,"attributes":[{"value":"/ An optional Read trait for advanced Bincode usage.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68722,"byte_end":68776,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68777,"byte_end":68780,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is highly recommended to use bincode with `io::Read` or `&[u8]` before","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68781,"byte_end":68858,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ implementing a custom `BincodeRead`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68859,"byte_end":68899,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68900,"byte_end":68903,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The forward_read_* methods are necessary because some byte sources want","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68904,"byte_end":68979,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ to pass a long-lived borrow to the visitor and others want to pass a","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":68980,"byte_end":69052,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ transient slice.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69053,"byte_end":69073,"line_start":12,"line_end":12,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69231,"byte_end":69247,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"forward_read_str","qualname":"::de::read::BincodeRead::forward_read_str","value":"pub fn forward_read_str<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Check that the next `length` bytes are a valid string and pass\n it on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Check that the next `length` bytes are a valid string and pass","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69122,"byte_end":69188,"line_start":14,"line_end":14,"column_start":5,"column_end":71}},{"value":"/ it on to the serde reader.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69193,"byte_end":69223,"line_start":15,"line_end":15,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69437,"byte_end":69452,"line_start":21,"line_end":21,"column_start":8,"column_end":23},"name":"get_byte_buffer","qualname":"::de::read::BincodeRead::get_byte_buffer","value":"pub fn get_byte_buffer(&mut Self, usize) -> Result<Vec<u8>>","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Transfer ownership of the next `length` bytes to the caller.\n","sig":null,"attributes":[{"value":"/ Transfer ownership of the next `length` bytes to the caller.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69365,"byte_end":69429,"line_start":20,"line_end":20,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69579,"byte_end":69597,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"forward_read_bytes","qualname":"::de::read::BincodeRead::forward_read_bytes","value":"pub fn forward_read_bytes<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":553},"children":[],"decl_id":null,"docs":" Pass a slice of the next `length` bytes on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Pass a slice of the next `length` bytes on to the serde reader.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69504,"byte_end":69571,"line_start":23,"line_end":23,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69773,"byte_end":69784,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"SliceReader","qualname":"::de::read::SliceReader","value":"SliceReader {  }","parent":null,"children":[{"krate":0,"index":562}],"decl_id":null,"docs":" A BincodeRead implementation for byte slices\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for byte slices","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69713,"byte_end":69761,"line_start":29,"line_end":29,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":563},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69889,"byte_end":69897,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"IoReader","qualname":"::de::read::IoReader","value":"IoReader {  }","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"decl_id":null,"docs":" A BincodeRead implementation for `io::Read`ers\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for `io::Read`ers","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69827,"byte_end":69877,"line_start":34,"line_end":34,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54199,"byte_end":54211,"line_start":28,"line_end":28,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613}],"decl_id":null,"docs":" A Deserializer that reads bytes from a buffer.","sig":null,"attributes":[{"value":"/ A Deserializer that reads bytes from a buffer.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53732,"byte_end":53782,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53783,"byte_end":53786,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This struct should rarely be used.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53787,"byte_end":53825,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"/ In most cases, prefer the `deserialize_from` function.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53826,"byte_end":53884,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53885,"byte_end":53888,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The ByteOrder that is chosen will impact the endianness that","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53889,"byte_end":53953,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/ is used to read integers out of the reader.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53954,"byte_end":54001,"line_start":21,"line_end":21,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54002,"byte_end":54005,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54006,"byte_end":54019,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ let d = Deserializer::new(&mut some_reader, SizeLimit::new());","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54020,"byte_end":54086,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ serde::Deserialize::deserialize(&mut deserializer);","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54087,"byte_end":54142,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ let bytes_read = d.bytes_read();","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54143,"byte_end":54179,"line_start":26,"line_end":26,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54180,"byte_end":54187,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54776,"byte_end":54787,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"with_reader","qualname":"<Deserializer<IoReader<IR>, O>>::with_reader","value":"pub fn with_reader(IR, O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Deserializer with a given `Read`er and options.\n","sig":null,"attributes":[{"value":"/ Creates a new Deserializer with a given `Read`er and options.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54699,"byte_end":54764,"line_start":46,"line_end":46,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":55059,"byte_end":55069,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Deserializer<SliceReader, O>>::from_slice","value":"pub fn from_slice(&'de [u8], O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Deserializer that will read from the given slice.\n","sig":null,"attributes":[{"value":"/ Creates a new Deserializer that will read from the given slice.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54980,"byte_end":55047,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":55359,"byte_end":55376,"line_start":67,"line_end":67,"column_start":12,"column_end":29},"name":"with_bincode_read","qualname":"<Deserializer<R, O>>::with_bincode_read","value":"pub fn with_bincode_read(R, O) -> Deserializer<R, O>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Deserializer with the given `BincodeRead`er\n","sig":null,"attributes":[{"value":"/ Creates a new Deserializer with the given `BincodeRead`er","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":55286,"byte_end":55347,"line_start":66,"line_end":66,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1523},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":74449,"byte_end":74461,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"LittleEndian","qualname":"::byteorder::LittleEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":74498,"byte_end":74507,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"BigEndian","qualname":"::byteorder::BigEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":882},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":83801,"byte_end":83807,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a serialization or deserialization operation.\n","sig":null,"attributes":[{"value":"/ The result of a serialization or deserialization operation.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":83728,"byte_end":83791,"line_start":8,"line_end":8,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":884},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":83914,"byte_end":83919,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Box<ErrorKind>","parent":null,"children":[],"decl_id":null,"docs":" An error that can be produced during (de)serializing.\n","sig":null,"attributes":[{"value":"/ An error that can be produced during (de)serializing.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":83847,"byte_end":83904,"line_start":11,"line_end":11,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1562},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84215,"byte_end":84217,"line_start":19,"line_end":19,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" If the error stems from the reader/writer that is being used\n during (de)serialization, that error will be stored and returned here.\n","sig":null,"attributes":[{"value":"/ If the error stems from the reader/writer that is being used","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84067,"byte_end":84131,"line_start":17,"line_end":17,"column_start":5,"column_end":69}},{"value":"/ during (de)serialization, that error will be stored and returned here.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84136,"byte_end":84210,"line_start":18,"line_end":18,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1565},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84327,"byte_end":84346,"line_start":21,"line_end":21,"column_start":5,"column_end":24},"name":"InvalidUtf8Encoding","qualname":"::error::ErrorKind::InvalidUtf8Encoding","value":"ErrorKind::InvalidUtf8Encoding(Utf8Error)","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a string that is not valid utf8\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a string that is not valid utf8","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84234,"byte_end":84322,"line_start":20,"line_end":20,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1568},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84481,"byte_end":84500,"line_start":24,"line_end":24,"column_start":5,"column_end":24},"name":"InvalidBoolEncoding","qualname":"::error::ErrorKind::InvalidBoolEncoding","value":"ErrorKind::InvalidBoolEncoding(u8)","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a bool that was\n not encoded as either a 1 or a 0\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a bool that was","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84363,"byte_end":84435,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ not encoded as either a 1 or a 0","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84440,"byte_end":84476,"line_start":23,"line_end":23,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84613,"byte_end":84632,"line_start":26,"line_end":26,"column_start":5,"column_end":24},"name":"InvalidCharEncoding","qualname":"::error::ErrorKind::InvalidCharEncoding","value":"ErrorKind::InvalidCharEncoding","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a char that is not in the correct format.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84510,"byte_end":84608,"line_start":25,"line_end":25,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84761,"byte_end":84779,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"InvalidTagEncoding","qualname":"::error::ErrorKind::InvalidTagEncoding","value":"ErrorKind::InvalidTagEncoding(usize)","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize the tag of an enum that is\n not in the expected ranges\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize the tag of an enum that is","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84638,"byte_end":84721,"line_start":27,"line_end":27,"column_start":5,"column_end":88}},{"value":"/ not in the expected ranges","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84726,"byte_end":84756,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1576},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84921,"byte_end":84947,"line_start":32,"line_end":32,"column_start":5,"column_end":31},"name":"DeserializeAnyNotSupported","qualname":"::error::ErrorKind::DeserializeAnyNotSupported","value":"ErrorKind::DeserializeAnyNotSupported","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Serde has a deserialize_any method that lets the format hint to the\n object which route to take in deserializing.\n","sig":null,"attributes":[{"value":"/ Serde has a deserialize_any method that lets the format hint to the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84792,"byte_end":84863,"line_start":30,"line_end":30,"column_start":5,"column_end":76}},{"value":"/ object which route to take in deserializing.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84868,"byte_end":84916,"line_start":31,"line_end":31,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85063,"byte_end":85072,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"SizeLimit","qualname":"::error::ErrorKind::SizeLimit","value":"ErrorKind::SizeLimit","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" If (de)serializing a message takes more than the provided size limit, this\n error is returned.\n","sig":null,"attributes":[{"value":"/ If (de)serializing a message takes more than the provided size limit, this","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84953,"byte_end":85031,"line_start":33,"line_end":33,"column_start":5,"column_end":83}},{"value":"/ error is returned.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85036,"byte_end":85058,"line_start":34,"line_end":34,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1580},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85155,"byte_end":85177,"line_start":37,"line_end":37,"column_start":5,"column_end":27},"name":"SequenceMustHaveLength","qualname":"::error::ErrorKind::SequenceMustHaveLength","value":"ErrorKind::SequenceMustHaveLength","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" Bincode can not encode sequences of unknown length (like iterators).\n","sig":null,"attributes":[{"value":"/ Bincode can not encode sequences of unknown length (like iterators).","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85078,"byte_end":85150,"line_start":36,"line_end":36,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1582},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85226,"byte_end":85232,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"Custom","qualname":"::error::ErrorKind::Custom","value":"ErrorKind::Custom(String)","parent":{"krate":0,"index":1561},"children":[],"decl_id":null,"docs":" A custom error message from Serde.\n","sig":null,"attributes":[{"value":"/ A custom error message from Serde.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85183,"byte_end":85221,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":1561},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":84051,"byte_end":84060,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n    Io(io::Error),\n    InvalidUtf8Encoding(Utf8Error),\n    InvalidBoolEncoding(u8),\n    InvalidCharEncoding,\n    InvalidTagEncoding(usize),\n    DeserializeAnyNotSupported,\n    SizeLimit,\n    SequenceMustHaveLength,\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1565},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582}],"decl_id":null,"docs":" The kind of error that can be produced during a serialization or deserialization.\n","sig":null,"attributes":[{"value":"/ The kind of error that can be produced during a serialization or deserialization.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":83939,"byte_end":84024,"line_start":14,"line_end":14,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1017},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92262,"byte_end":92272,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::Serializer","value":"Serializer {  }","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021}],"decl_id":null,"docs":" An Serializer that encodes values directly into a Writer.","sig":null,"attributes":[{"value":"/ An Serializer that encodes values directly into a Writer.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":91990,"byte_end":92051,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92052,"byte_end":92055,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The specified byte-order will impact the endianness that is","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92056,"byte_end":92119,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/ used during the encoding.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92120,"byte_end":92149,"line_start":16,"line_end":16,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92150,"byte_end":92153,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This struct should not be used often.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92154,"byte_end":92195,"line_start":18,"line_end":18,"column_start":1,"column_end":42}},{"value":"/ For most cases, prefer the `encode_into` function.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92196,"byte_end":92250,"line_start":19,"line_end":19,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92752,"byte_end":92755,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer<W, O>>::new","value":"pub fn new(W, O) -> Serializer<W, O>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Serializer with the given `Write`r.\n","sig":null,"attributes":[{"value":"/ Creates a new Serializer with the given `Write`r.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92687,"byte_end":92740,"line_start":36,"line_end":36,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1116},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":103663,"byte_end":103671,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"Compound","qualname":"::ser::Compound","value":"Compound {  }","parent":null,"children":[{"krate":0,"index":1120}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1292},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1667,"byte_end":1673,"line_start":59,"line_end":59,"column_start":8,"column_end":14},"name":"config","qualname":"::config","value":"pub fn config() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Get a default configuration object.","sig":null,"attributes":[{"value":"/ Get a default configuration object.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1395,"byte_end":1434,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1435,"byte_end":1438,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ### Default Configuration:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1439,"byte_end":1469,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ | Byte limit | Endianness |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1474,"byte_end":1505,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ |------------|------------|","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1506,"byte_end":1537,"line_start":55,"line_end":55,"column_start":1,"column_end":32}},{"value":"/ | Unlimited  | Little     |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1538,"byte_end":1569,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1570,"byte_end":1587,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `options()` instead\")","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1588,"byte_end":1659,"line_start":58,"line_end":58,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1293},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2267,"byte_end":2274,"line_start":77,"line_end":77,"column_start":8,"column_end":15},"name":"options","qualname":"::options","value":"pub fn options() -> DefaultOptions","parent":null,"children":[],"decl_id":null,"docs":" Get a default configuration object.","sig":null,"attributes":[{"value":"/ Get a default configuration object.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1709,"byte_end":1748,"line_start":63,"line_end":63,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1749,"byte_end":1752,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration returned by this function","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1753,"byte_end":1821,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/ is not the same as that used by the other functions in this","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1822,"byte_end":1885,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/ module. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1886,"byte_end":1905,"line_start":67,"line_end":67,"column_start":1,"column_end":20}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1906,"byte_end":1973,"line_start":68,"line_end":68,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1974,"byte_end":2001,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2002,"byte_end":2005,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ### Default Configuration:","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2006,"byte_end":2036,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2037,"byte_end":2040,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ | Byte limit | Endianness | Int Encoding | Trailing Behavior |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2041,"byte_end":2107,"line_start":73,"line_end":73,"column_start":1,"column_end":67}},{"value":"/ |------------|------------|--------------|-------------------|","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2108,"byte_end":2174,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"/ | Unlimited  | Little     | Varint       | Reject            |","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2175,"byte_end":2241,"line_start":75,"line_end":75,"column_start":1,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2242,"byte_end":2259,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1294},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2812,"byte_end":2826,"line_start":90,"line_end":90,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::serialize_into","value":"pub fn serialize_into<W, T: ?Sized>(W, &T) -> Result<()> where\nW: std::io::Write, T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using the default configuration.","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2326,"byte_end":2408,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2409,"byte_end":2412,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2413,"byte_end":2500,"line_start":83,"line_end":83,"column_start":1,"column_end":88}},{"value":"/ is returned and *no bytes* will be written into the `Writer`.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2501,"byte_end":2566,"line_start":84,"line_end":84,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2567,"byte_end":2570,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2571,"byte_end":2642,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2643,"byte_end":2708,"line_start":87,"line_end":87,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2709,"byte_end":2776,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":2777,"byte_end":2804,"line_start":89,"line_end":89,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1297},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3370,"byte_end":3379,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialize","value":"pub fn serialize<T: ?Sized>(&T) -> Result<Vec<u8>> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using the default configuration.","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3033,"byte_end":3124,"line_start":100,"line_end":100,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3125,"byte_end":3128,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3129,"byte_end":3200,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3201,"byte_end":3266,"line_start":103,"line_end":103,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3267,"byte_end":3334,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3335,"byte_end":3362,"line_start":105,"line_end":105,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1299},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3976,"byte_end":3992,"line_start":124,"line_end":124,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::deserialize_from","value":"pub fn deserialize_from<R, T>(R) -> Result<T> where R: std::io::Read,\nT: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using the default configuration.","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3573,"byte_end":3657,"line_start":116,"line_end":116,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3658,"byte_end":3661,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3662,"byte_end":3730,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3731,"byte_end":3734,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3735,"byte_end":3806,"line_start":120,"line_end":120,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3807,"byte_end":3872,"line_start":121,"line_end":121,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3873,"byte_end":3940,"line_start":122,"line_end":122,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":3941,"byte_end":3968,"line_start":123,"line_end":123,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1302},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4751,"byte_end":4774,"line_start":145,"line_end":145,"column_start":8,"column_end":31},"name":"deserialize_from_custom","qualname":"::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R, T>(R) -> Result<T> where\nR: de::read::BincodeRead, T: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4216,"byte_end":4305,"line_start":135,"line_end":135,"column_start":1,"column_end":90}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4306,"byte_end":4389,"line_start":136,"line_end":136,"column_start":1,"column_end":84}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4390,"byte_end":4432,"line_start":137,"line_end":137,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4433,"byte_end":4436,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4437,"byte_end":4505,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4506,"byte_end":4509,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4510,"byte_end":4581,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4582,"byte_end":4647,"line_start":142,"line_end":142,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4648,"byte_end":4715,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":4716,"byte_end":4743,"line_start":144,"line_end":144,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1306},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5132,"byte_end":5152,"line_start":160,"line_end":160,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(R, &mut T) -> Result<()> where\nT: serde::de::Deserialize, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Only use this if you know what you're doing.","sig":null,"attributes":[{"value":"/ Only use this if you know what you're doing.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5021,"byte_end":5069,"line_start":156,"line_end":156,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5070,"byte_end":5073,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ This is part of the public API.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5074,"byte_end":5109,"line_start":158,"line_end":158,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":1310},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5744,"byte_end":5755,"line_start":177,"line_end":177,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::deserialize","value":"pub fn deserialize<'a, T>(&'a [u8]) -> Result<T> where\nT: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using the default configuration.","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5408,"byte_end":5498,"line_start":171,"line_end":171,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5499,"byte_end":5502,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5503,"byte_end":5574,"line_start":173,"line_end":173,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5575,"byte_end":5640,"line_start":174,"line_end":174,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5641,"byte_end":5708,"line_start":175,"line_end":175,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5709,"byte_end":5736,"line_start":176,"line_end":176,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1313},"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6307,"byte_end":6322,"line_start":193,"line_end":193,"column_start":8,"column_end":23},"name":"serialized_size","qualname":"::serialized_size","value":"pub fn serialized_size<T: ?Sized>(&T) -> Result<u64> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with the default configuration.","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with the default configuration.","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":5957,"byte_end":6061,"line_start":187,"line_end":187,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6062,"byte_end":6065,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ **Warning:** the default configuration used by this function is not","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6066,"byte_end":6137,"line_start":189,"line_end":189,"column_start":1,"column_end":72}},{"value":"/ the same as that used by the `DefaultOptions` struct. See the","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6138,"byte_end":6203,"line_start":190,"line_end":190,"column_start":1,"column_end":66}},{"value":"/ [config](config/index.html#options-struct-vs-bincode-functions)","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6204,"byte_end":6271,"line_start":191,"line_end":191,"column_start":1,"column_end":68}},{"value":"/ module for more details","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":6272,"byte_end":6299,"line_start":192,"line_end":192,"column_start":1,"column_end":28}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20476,"byte_end":20488,"line_start":17,"line_end":17,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20565,"byte_end":20574,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20648,"byte_end":20660,"line_start":25,"line_end":25,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":26565,"byte_end":26579,"line_start":182,"line_end":182,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":31756,"byte_end":31770,"line_start":330,"line_end":330,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1371},{"krate":0,"index":1374},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":35697,"byte_end":35711,"line_start":460,"line_end":460,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":262},{"krate":0,"index":266},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":45719,"byte_end":45725,"line_start":102,"line_end":102,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":333},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51736,"byte_end":51743,"line_start":22,"line_end":22,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":52073,"byte_end":52081,"line_start":39,"line_end":39,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52914,"byte_end":52927,"line_start":19,"line_end":19,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":53055,"byte_end":53069,"line_start":26,"line_end":26,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9370,"byte_end":9384,"line_start":79,"line_end":79,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9791,"byte_end":9805,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9889,"byte_end":9903,"line_start":98,"line_end":98,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16498,"byte_end":16499,"line_start":272,"line_end":272,"column_start":38,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17322,"byte_end":17336,"line_start":302,"line_end":302,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17580,"byte_end":17595,"line_start":312,"line_end":312,"column_start":39,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17820,"byte_end":17840,"line_start":322,"line_end":322,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18077,"byte_end":18094,"line_start":332,"line_end":332,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18360,"byte_end":18375,"line_start":342,"line_end":342,"column_start":69,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18668,"byte_end":18682,"line_start":353,"line_end":353,"column_start":62,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18948,"byte_end":18968,"line_start":363,"line_end":363,"column_start":64,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19239,"byte_end":19256,"line_start":374,"line_end":374,"column_start":66,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69962,"byte_end":69973,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":70561,"byte_end":70569,"line_start":61,"line_end":61,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":70777,"byte_end":70788,"line_start":71,"line_end":71,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71333,"byte_end":71341,"line_start":90,"line_end":90,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71614,"byte_end":71625,"line_start":101,"line_end":101,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71875,"byte_end":71886,"line_start":111,"line_end":111,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":594},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":72733,"byte_end":72741,"line_start":139,"line_end":139,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":72989,"byte_end":72997,"line_start":152,"line_end":152,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54663,"byte_end":54675,"line_start":45,"line_end":45,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54940,"byte_end":54952,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":55261,"byte_end":55273,"line_start":65,"line_end":65,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":62422,"byte_end":62428,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":64173,"byte_end":64179,"line_start":363,"line_end":363,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":75419,"byte_end":75431,"line_start":42,"line_end":42,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":1536},{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":76388,"byte_end":76397,"line_start":86,"line_end":86,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":1542},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":81417,"byte_end":81418,"line_start":299,"line_end":299,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":83613,"byte_end":83614,"line_start":385,"line_end":385,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85263,"byte_end":85272,"line_start":42,"line_end":42,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":86732,"byte_end":86737,"line_start":76,"line_end":76,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":86844,"byte_end":86853,"line_start":82,"line_end":82,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":87931,"byte_end":87936,"line_start":105,"line_end":105,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":88077,"byte_end":88082,"line_start":111,"line_end":111,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92664,"byte_end":92674,"line_start":35,"line_end":35,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":98582,"byte_end":98593,"line_start":239,"line_end":239,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":103784,"byte_end":103792,"line_start":431,"line_end":431,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104184,"byte_end":104192,"line_start":453,"line_end":453,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104590,"byte_end":104598,"line_start":475,"line_end":475,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104995,"byte_end":105003,"line_start":497,"line_end":497,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":105391,"byte_end":105399,"line_start":519,"line_end":519,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":105969,"byte_end":105977,"line_start":549,"line_end":549,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":106395,"byte_end":106403,"line_start":571,"line_end":571,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":106907,"byte_end":106919,"line_start":597,"line_end":597,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":107278,"byte_end":107290,"line_start":615,"line_end":615,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":107655,"byte_end":107667,"line_start":633,"line_end":633,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108031,"byte_end":108043,"line_start":651,"line_end":651,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108403,"byte_end":108415,"line_start":669,"line_end":669,"column_start":56,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108952,"byte_end":108964,"line_start":695,"line_end":695,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":109349,"byte_end":109361,"line_start":713,"line_end":713,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":110778,"byte_end":110788,"line_start":768,"line_end":768,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1092,"byte_end":1098,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/lib.rs","byte_start":1163,"byte_end":1165,"line_start":37,"line_end":37,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":493}},{"kind":"Mod","span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":53725,"byte_end":53729,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":543}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20476,"byte_end":20488,"line_start":17,"line_end":17,"column_start":27,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1315},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20565,"byte_end":20574,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1320},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/endian.rs","byte_start":20648,"byte_end":20660,"line_start":25,"line_end":25,"column_start":27,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1325},"to":{"krate":0,"index":70}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":26565,"byte_end":26579,"line_start":182,"line_end":182,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":31756,"byte_end":31770,"line_start":330,"line_end":330,"column_start":22,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/int.rs","byte_start":35697,"byte_end":35711,"line_start":460,"line_end":460,"column_start":22,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1351},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/legacy.rs","byte_start":45719,"byte_end":45725,"line_start":102,"line_end":102,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":51736,"byte_end":51743,"line_start":22,"line_end":22,"column_start":20,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1428},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/limit.rs","byte_start":52073,"byte_end":52081,"line_start":39,"line_end":39,"column_start":20,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1434},"to":{"krate":0,"index":349}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":52914,"byte_end":52927,"line_start":19,"line_end":19,"column_start":24,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":369}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/trailing.rs","byte_start":53055,"byte_end":53069,"line_start":26,"line_end":26,"column_start":24,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1444},"to":{"krate":0,"index":369}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9370,"byte_end":9384,"line_start":79,"line_end":79,"column_start":6,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9791,"byte_end":9805,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":9889,"byte_end":9903,"line_start":98,"line_end":98,"column_start":26,"column_end":40},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1449},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11171,"byte_end":11186,"line_start":128,"line_end":128,"column_start":20,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":479},"to":{"krate":0,"index":385}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":11189,"byte_end":11194,"line_start":128,"line_end":128,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":385}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":16498,"byte_end":16499,"line_start":272,"line_end":272,"column_start":38,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":385}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17322,"byte_end":17336,"line_start":302,"line_end":302,"column_start":32,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17580,"byte_end":17595,"line_start":312,"line_end":312,"column_start":39,"column_end":54},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":17820,"byte_end":17840,"line_start":322,"line_end":322,"column_start":34,"column_end":54},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18077,"byte_end":18094,"line_start":332,"line_end":332,"column_start":36,"column_end":53},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18360,"byte_end":18375,"line_start":342,"line_end":342,"column_start":69,"column_end":84},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1467},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18668,"byte_end":18682,"line_start":353,"line_end":353,"column_start":62,"column_end":76},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1455},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":18948,"byte_end":18968,"line_start":363,"line_end":363,"column_start":64,"column_end":84},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1479},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/config/mod.rs","byte_start":19239,"byte_end":19256,"line_start":374,"line_end":374,"column_start":66,"column_end":83},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1491},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69111,"byte_end":69115,"line_start":13,"line_end":13,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":4402},"to":{"krate":0,"index":553}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":69962,"byte_end":69973,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":70561,"byte_end":70569,"line_start":61,"line_end":61,"column_start":9,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":70777,"byte_end":70788,"line_start":71,"line_end":71,"column_start":29,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71333,"byte_end":71341,"line_start":90,"line_end":90,"column_start":32,"column_end":40},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71614,"byte_end":71625,"line_start":101,"line_end":101,"column_start":16,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":71875,"byte_end":71886,"line_start":111,"line_end":111,"column_start":42,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":560},"to":{"krate":0,"index":553}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":72733,"byte_end":72741,"line_start":139,"line_end":139,"column_start":9,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/read.rs","byte_start":72989,"byte_end":72997,"line_start":152,"line_end":152,"column_start":33,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":563},"to":{"krate":0,"index":553}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54663,"byte_end":54675,"line_start":45,"line_end":45,"column_start":33,"column_end":45},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":54940,"byte_end":54952,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":55261,"byte_end":55273,"line_start":65,"line_end":65,"column_start":44,"column_end":56},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":62422,"byte_end":62428,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":689},"to":{"krate":20,"index":1701}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/de/mod.rs","byte_start":64173,"byte_end":64179,"line_start":363,"line_end":363,"column_start":17,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":711},"to":{"krate":20,"index":1719}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":75419,"byte_end":75431,"line_start":42,"line_end":42,"column_start":20,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1523},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":76388,"byte_end":76397,"line_start":86,"line_end":86,"column_start":20,"column_end":29},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1528},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":77356,"byte_end":77361,"line_start":130,"line_end":130,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":77364,"byte_end":77368,"line_start":130,"line_end":130,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":785}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":79163,"byte_end":79167,"line_start":211,"line_end":211,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4402},"to":{"krate":0,"index":802}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":81417,"byte_end":81418,"line_start":299,"line_end":299,"column_start":45,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":802}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":81452,"byte_end":81457,"line_start":301,"line_end":301,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4459},"to":{"krate":0,"index":833}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/byteorder.rs","byte_start":83613,"byte_end":83614,"line_start":385,"line_end":385,"column_start":47,"column_end":48},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":861},"to":{"krate":0,"index":833}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":85263,"byte_end":85272,"line_start":42,"line_end":42,"column_start":19,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1561},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":86732,"byte_end":86737,"line_start":76,"line_end":76,"column_start":26,"column_end":31},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":884},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":86844,"byte_end":86853,"line_start":82,"line_end":82,"column_start":23,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1561},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":87931,"byte_end":87936,"line_start":105,"line_end":105,"column_start":27,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":884},"to":{"krate":20,"index":8916}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/error.rs","byte_start":88077,"byte_end":88082,"line_start":111,"line_end":111,"column_start":28,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":884},"to":{"krate":20,"index":9531}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":92664,"byte_end":92674,"line_start":35,"line_end":35,"column_start":28,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":98582,"byte_end":98593,"line_start":239,"line_end":239,"column_start":18,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":103784,"byte_end":103792,"line_start":431,"line_end":431,"column_start":45,"column_end":53},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2153}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104184,"byte_end":104192,"line_start":453,"line_end":453,"column_start":47,"column_end":55},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2159}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104590,"byte_end":104598,"line_start":475,"line_end":475,"column_start":53,"column_end":61},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2165}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":104995,"byte_end":105003,"line_start":497,"line_end":497,"column_start":54,"column_end":62},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2171}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":105391,"byte_end":105399,"line_start":519,"line_end":519,"column_start":45,"column_end":53},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2177}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":105969,"byte_end":105977,"line_start":549,"line_end":549,"column_start":48,"column_end":56},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2188}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":106395,"byte_end":106403,"line_start":571,"line_end":571,"column_start":55,"column_end":63},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1116},"to":{"krate":20,"index":2195}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":106907,"byte_end":106919,"line_start":597,"line_end":597,"column_start":51,"column_end":63},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2153}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":107278,"byte_end":107290,"line_start":615,"line_end":615,"column_start":53,"column_end":65},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2159}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":107655,"byte_end":107667,"line_start":633,"line_end":633,"column_start":59,"column_end":71},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2165}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108031,"byte_end":108043,"line_start":651,"line_end":651,"column_start":60,"column_end":72},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2171}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108403,"byte_end":108415,"line_start":669,"line_end":669,"column_start":56,"column_end":68},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2177}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":108952,"byte_end":108964,"line_start":695,"line_end":695,"column_start":54,"column_end":66},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2188}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":109349,"byte_end":109361,"line_start":713,"line_end":713,"column_start":61,"column_end":73},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1186},"to":{"krate":20,"index":2195}},{"span":{"file_name":"/home/lazytrader/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.3.3/src/ser/mod.rs","byte_start":110778,"byte_end":110788,"line_start":768,"line_end":768,"column_start":6,"column_end":16},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1257},"to":{"krate":4294967295,"index":4294967295}}]}